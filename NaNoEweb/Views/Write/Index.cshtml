@using NaNoEweb.DBConnection
@using NaNoEweb.Data
@{
    ViewData["Title"] = "Writing";
    /* TODO: Maybe, might not - make it so you can move paragraphs up/down, etc. */
    /* TODO: add 'user position' to MNovelInstance so you can 'open' where you were before. */
    /* TODO: make it disable 'search for writing error' in edit mode until load complete */

    //LoadedNovels.LoadedNovel;
    // TODO: make it ajax load everything outwards from position after adding position
    var ordered = DB.I.GetNovelMap(LoadedNovels.LoadedNovel.ID.ToString());
    int firstNext = ordered.Count > 0 ? ordered.First().ID : -2;
    int lastPrev = ordered.Count > 0 ? ordered.Last().ID : -1;

    var counts = DB.I.GetNumbers((int)LoadedNovels.LoadedNovel.ID);
}
<div class="area-writing" data-novel="@(LoadedNovels.LoadedNovel.ID)">
    <div class="totals">
        <p><div class="row"><div class="col-8"><strong>Word Count:</strong></div><div class="col-4">@(counts[4])</div></div></p>
        <p><div class="row"><div class="col-8"><strong>Chapters:</strong></div><div class="col-4">@(counts[1])</div></div></p>
        <p><div class="row"><div class="col-8"><strong>Paragraphs:</strong></div><div class="col-4">@(counts[0])</div></div></p>
        <p><div class="row"><div class="col-8"><strong>Bookmarks:</strong></div><div class="col-4">@(counts[3])</div></div></p>
        <p><div class="row"><div class="col-8"><strong>Notes:</strong></div><div class="col-4">@(counts[2])</div></div></p>
    </div>
    <div class="notes">
        <div class="show-items" value="act-notes"><div class="act-notes selected">Notes</div>/<div class="act-chapters">Chapters</div></div>
        <div class="new-item">+</div>
        <div class="notes-items">
            <div class="items-list">
                <ul>
                    @{
                        var lstNotes = DB.I.Get<MNovelNote>($"WHERE [novelinstance_id]={LoadedNovels.LoadedNovel.ID}");
                        if (lstNotes.Count == 0)
                        {
                            <li data-id="-2"><em>Create your first item above...</em></li>
                        }
                        else
                        {
                            foreach (var noteNote in lstNotes)
                            {
                                <li class="notes-items-item" data-id="@noteNote.ID">@noteNote.Title</li>
                            }
                        }
                    }
                </ul>
                <!-- Bugged: Need to work out why js logic isn't a good 5am thing for me -->
                <input type="text" class="notes-search" id="notes-search" />
            </div>
        </div>
        <div class="chapter-items">
            <div class="items-list">
                <ul>
                    @{
                        var lstChapterNotes = DB.I.Get<MNovelChapter>($"WHERE [novelinstance_id]={LoadedNovels.LoadedNovel.ID}");
                        if (lstChapterNotes.Count == 0)
                        {
                            <li data-id="-1"><em>Create your first item above...</em></li>
                        }
                        else
                        {
                            foreach (var chapterNote in lstChapterNotes.OrderBy(a => a.OrderPosition))
                            {
                                <li class="chapter-note-item" data-id="@chapterNote.ID">Ch. @chapterNote.OrderPosition: @chapterNote.Title</li>
                            }
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="new-chapter-box" style="display: none;">
            <form id="frmNewChapterNote" method="post" enctype="multipart/form-data" asp-controller="Write" asp-action="Act_AddChapterNote">
                Title:<br />
                <input type="text" id="chapter-title" name="chapter-title" /><br />
                <br />
                1st note:<br />
                <input type="text" id="chapter-note" name="chapter-note" /><br />
                <br />
                <input type="button" value="Add" onclick="AjaxFormChapterNoteSubmit()" /><br />
            </form>
        </div>
        <div class="new-note-box" style="display: none;">
            <form id="frmNewNoteNote" method="post" enctype="multipart/form-data" asp-controller="Write" asp-action="Act_AddNoteNote">
                Title:<br />
                <input type="text" id="note-title" name="note-title" /><br />
                <br />
                1st note:<br />
                <input type="text" id="note-note" name="note-note" /><br />
                <br />
                <input type="button" value="Add" onclick="AjaxFormNoteNoteSubmit()" /><br />
            </form>
        </div>
        <div class="items-view"></div>
    </div>
    <div class="novel-above">
        <div class="paragraph" data-id="-1" data-prev="-1" data-next="@(firstNext)">
            <div class="row">
                <div class="col-12"><h3>@(LoadedNovels.LoadedNovel?.Title)</h3><em>Start of Novel</em></div>
            </div>
        </div>
        @{
            foreach (var position in ordered)
            {
                var item = DB.I.Get<MNovelContent>($"WHERE id={position.ID}").First();
                <div class="paragraph @((position.Flag == "C" ? "para-chapter" : (position.Flag == "N" ? "para-note" : (position.Flag == "B" ? "para-bookmark" : ""))))" data-id="@(item.ID)" data-prev="@(item.ID_Before)" data-next="@(item.ID_After)">
                    <div class="row">
                        <div class="col-10">
                            @(DBInterop.ConvertFromSafeString(item.Text))
                        </div><div class="col-2"><div class="action" action="delete-paragraph">Delete</div></div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="novel-writing">
        <div class="writing-area">
            <div class="row">
                <div class="col-10">
                    <textarea class="writing-box" spellcheck="true"></textarea>
                </div>
                <div class="col-2">
                    <div class="note"><strong>&lt;enter&gt;</strong> to <strong>save what's written</strong></div>
                    <div class="note"><strong>Normal</strong> text = <strong>Paragraph</strong></div>
                    <div class="note">'<strong>C:&lt;title&gt;</strong>': <strong>Chapter</strong>, optional</div>
                    <div class="note">'<strong>N:&lt;text&gt;</strong>': <strong>Note</strong>, needed</div>
                    <div class="note">'<strong>B:&lt;name&gt;</strong>': <strong>Bookmark</strong>, needed</div>
                    <div class="note"><input type="checkbox" class="edit-box" /> <strong>Edit Mode</strong></div>
                </div>
            </div>
        </div>
    </div>
    <div class="novel-below">
        <div class="paragraph" data-id="-2" data-prev="@(lastPrev)" data-next="-2">
            <div class="row">
                <div class="col-12"><em>End of Novel</em></div>
            </div>
        </div>
    </div>
</div>
@* Dialog boxes*@
<div tabindex="-1" role="dialog" class="ui-dialog ui-corner-all ui-widget ui-widget-content ui-front ui-dialog-buttons ui-draggable ui-resizable" aria-describedby="dialog" aria-labelledby="ui-id-18" style="position: absolute; height: auto; width: 400px; top: 1193.54px; left: 187.303px;">
    <div class="ui-dialog-titlebar ui-corner-all ui-widget-header ui-helper-clearfix ui-draggable-handle">
        <span id="ui-id-18" class="ui-dialog-title">Please confirm...</span>
        <button type="button" class="ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close" title="Close">
            <span class="ui-button-icon ui-icon ui-icon-closethick"></span>
            <span class="ui-button-icon-space"> </span>
            Close
        </button>
    </div>
    <div id="dialog" class="ui-dialog-content ui-widget-content" style="width: auto; min-height: 19.053px; max-height: none; height: auto;">
        <p>Are you sure you want to delete this note?</p>
        <p class="delete-note-title"></p>
        <p class="delete-note-text"></p>
    </div>
    <div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix">
        <div class="ui-dialog-buttonset">
            <button type="button" class="ui-button ui-corner-all ui-widget">Ok</button>
            <button type="button" class="ui-button ui-corner-all ui-widget">Cancel</button>
        </div>
    </div>
    <div class="ui-resizable-handle ui-resizable-n" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-e" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-s" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-w" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-sw" style="z-index: 90;"></div><div class="ui-resizable-handle ui-resizable-ne" style="z-index: 90;"></div>
    <div class="ui-resizable-handle ui-resizable-nw" style="z-index: 90;"></div>
</div>
@* Scripts *@
<script>
    var isChapter = false;
    var isNote = false;
    var actId = -1;
    function updateTracking() {
        $.ajax({
            type: 'POST',
            url: '../../../Write/Act_UpdateTimeTrack',
            processData: false,
            contentType: false
        }).done(function (e) {
            //console.log('DEBUG: Updated time tracking...')
        });
        fetch('../../../Write/_UpdateCounts')
            .then((result) => { return result.text(); })
            .then((content) => { $('.totals').html(content); });
    }
    function lowestElement() {
        var lowest = 0;
        $(document).find('.paragraph').each(function (i) {
            if ($(this).attr('data-id') < lowest) {
                lowest = $(this).attr('data-id');
            }
        });
        return lowest - 2;
    }
    function AjaxFormChapterNoteSubmit() {
        $('#frmNewChapterNote').find('input[type="button"]').first().prop('disabled', true).addClass('disabled');
        var url = $('#frmNewChapterNote').attr('action');
        var formData = new FormData();
        formData.append('title', $('#chapter-title').val());
        formData.append('firstnote', $('#chapter-note').val())

        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            processData: false,
            contentType: false
        }).done(function (response) {
            if (response.status === "success") {
                var id = response.id;
                var title = $('#chapter-title').val();
                var lastLi = $('.chapter-items .items-list ul li').last();
                var posId = 1;
                if (lastLi.attr('data-id') != '-1') posId = $('.chapter-items .items-list ul li').length + 1;
                $('.chapter-items .items-list ul').append('<li class="chapter-note-item" data-id="' + id + '">Ch. ' + posId + ': ' + title + '</li>');
                $('#chapter-title').val('');
                $('#chapter-note').val('');
                $('.new-chapter-box').attr('style', 'display:none;');
                if (lastLi.attr('data-id') == '-1') lastLi.remove();
            }
            else if (response.status === "failed") {
                alert('Failed to add this chapter note');
            }
            $('#frmNewChapterNote').find('input[type="button"]').first().prop('disabled', false).removeClass('disabled');
        });
    }
    function AjaxFormNoteNoteSubmit() {
        $('#frmNewNoteNote').find('input[type="button"]').first().prop('disabled', true).addClass('disabled');
        var url = $('#frmNewNoteNote').attr('action');
        var formData = new FormData();
        formData.append('title', $('#note-title').val());
        formData.append('firstnote', $('#note-note').val());

        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            processData: false,
            contentType: false
        }).done(function (response) {
            if (response.status === "success") {
                var id = response.id;
                var title = $('#note-title').val();
                var lastLi = $('.note-items .items-list ul li').last();
                $('.notes-items .items-list ul').append('<li class="note-items-item" data-id="' + id + '">' + title + '</li>');
                $('#note-title').val('');
                $('#note-note').val('');
                $('.new-note-box').attr('style', 'display:none;');
                if (lastLi.attr('data-id') == '-1') lastLi.remove();
            }
            else if (response.status === 'failed') {
                alert('Failed to add this note note');
            }
            $('#frmNewChapterNote').find('input[type="button"]').first().prop('disabled', false).removeClass('disabled');
        })
    }
    var editMode = false;
    $(document).ready(function () {
        $('.writing-box').keypress(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                e.preventDefault();
                if (!editMode) {
                    var content = $('.writing-box').val();
                    var exploded = content.split('.');
                    exploded = content.split('.');
                    content = '';
                    exploded.forEach(function (it) {
                        while (it.includes('  ')) it = it.replaceAll('  ', ' ');
                        var smlr = it.trim();
                        smlr = smlr.charAt(0).toUpperCase() + smlr.substring(1);
                        content += smlr + '. ';
                    });
                    content = content.replaceAll(' .', '');
                    content.trim();
                    $('.writing-box').val('');

                    /* GET ABOVE AND BELOW */
                    var upper = $('.novel-above');
                    var below = $('.novel-below');
                    var upperPara = upper.find('.paragraph').last();
                    var lowerPara = below.find('.paragraph').first();
                    var idBefore = upperPara.attr('data-id');
                    var idAfter = lowerPara.attr('data-id');
                    var lowerId = lowestElement();
                    upperPara.attr('data-next', lowerId);
                    lowerPara.attr('data-prev', lowerId);
                    /* END GET+UPDATE ABOVE AND BELOW */

                    /* FORM */
                    var url = 'Write/Act_AddParagraph';
                    var formData = new FormData();
                    formData.append('temp_id', lowerId);
                    formData.append('id_before', idBefore);
                    formData.append('id_after', idAfter);
                    var subst = content.substring(0, 2).toLowerCase();
                    var flag = 'P'; // Paragraph
                    //debugger;
                    if (subst == 'c:') {
                        flag = 'C'; // Chapter
                        content = content.substring(2);
                        if (content.trim().length > 0) {
                            content = ': ' + content;
                        }
                        content = 'Chapter' + content;
                    }
                    else if (subst == 'n:') {
                        flag = 'N';
                        content = content.substring(2);
                        if (content.trim().length > 0) {
                            content = ': ' + content;
                        }
                        content = 'Note' + content;
                    }
                    else if (subst == 'b:') {
                        flag = 'B';
                        content = content.substring(2);
                        if (content.trim().length > 0) {
                            content = ': ' + content;
                        }
                        content = 'Bookmark' + content;
                    }
                    formData.append('flag', flag);
                    formData.append('text', content);
                    /* END FORM */

                    /* ADD HTML ABOVE */
                    upper.append('<div class="paragraph ' +
                        (flag == 'C' ? 'para-chapter' : (flag == 'N' ? 'para-note' : (flag == 'B' ? 'para-bookmark' : ''))) +
                        '" data-id="' +
                        lowerId +
                        '" data-prev="' +
                        idBefore +
                        '" data-next="' +
                        idAfter +
                        '"><div class="row"><div class="col-10">' +
                        content +
                        '</div><div class="col-2"><div class="action" action="delete-paragraph">Delete</div></div></div></div>');

                    /* INSERT TO DB THEN UPDATE THE IDs */
                    $.ajax({
                        type: 'POST',
                        url: url,
                        data: formData,
                        processData: false,
                        contentType: false
                    }).done(function (response) {
                        if (response.status === "success") {
                            //debugger;
                            var splt = response.message.split(':');
                            $(document).find('[data-id="' + splt[0] + '"]').attr('data-id', splt[1]);
                            $('[data-prev="' + splt[0] + '"]').attr('data-prev', splt[1]);
                            $('[data-next="' + splt[0] + '"]').attr('data-next', splt[1]);
                            var updatePrev = $('.paragraph[data-prev=' + splt[1] + ']').first();
                            var updateNext = $('.paragraph[data-next=' + splt[1] + ']').last();
                            //debugger;
                            // Act_UpdateParagraphPreviousID
                            var url = 'Write/Act_UpdateParagraphPreviousID';
                            var formData = new FormData();
                            formData.append('para_id', updatePrev.attr('data-id'));
                            formData.append('newId', splt[1]);
                            $.ajax({
                                type: 'POST',
                                url: url,
                                data: formData,
                                processData: false,
                                contentType: false
                            }).done(function (response) {
                                console.log('next');
                            });
                            // Act_UpdateParagraphNextID
                            url = 'Write/Act_UpdateParagraphNextID';
                            formData = new FormData();
                            formData.append('para_id', updateNext.attr('data-id'));
                            formData.append('newId', splt[1]);
                            $.ajax({
                                type: 'POST',
                                url: url,
                                data: formData,
                                processData: false,
                                contentType: false
                            }).done(function (response) {
                                console.log('prev');
                            });
                        }
                        else {
                            alert('ERROR - Please make a copy of most recent paragraph and reload the page...')
                        }

                    });
                }
                else { // editing save into the above paragraph with the proper format
                    /* Write/Act_UpdateContentText(string content_id, string new_text) */
                    var content = $('.writing-box').val();
                    var exploded = content.split('.');
                    exploded = content.split('.');
                    content = '';
                    exploded.forEach(function (it) {
                        while (it.includes('  ')) it = it.replaceAll('  ', ' ');
                        var smlr = it.trim();
                        smlr = smlr.charAt(0).toUpperCase() + smlr.substring(1);
                        content += smlr + '. ';
                    });
                    content = content.replaceAll(' .', '');
                    content.trim();
                    var upper = $('.novel-above');
                    var id = upper.find('.paragraph').last().attr('data-id');
                    upper.find('.paragraph').last().find('.col-10').html(content);
                    var frmUpdate = new FormData();
                    frmUpdate.append('content_id', id);
                    frmUpdate.append('new_text', content);
                    $.ajax({
                        url: '../../../Write/Act_UpdateContentText',
                        type: 'POST',
                        data: frmUpdate,
                        processData: false,
                        contentType: false
                    }).done(function (e) {
                        console.log('Updated text for MNovelContent');
                    });
                }

                updateTracking();
            }
        });
        var trackDelayMousewheel = false;
        $(document).bind('mousewheel', function (e) {
            // No scroll on main novel when mouse over notes area
            if (isOnNotes) return;
            // Otherwise normal scroll, yay
            if (e.originalEvent.wheelDelta / 120 > 0) { // up
                var dropDown = $('.novel-above .paragraph').last();
                if (dropDown.attr('data-id') == '-1') return;
                if (editMode && dropDown.attr('data-prev') == '-1') return;
                $('.novel-above').remove(dropDown);
                $('.novel-below').prepend(dropDown);
            }
            else { // down
                var pushUp = $('.novel-below .paragraph').first();
                if (pushUp.attr('data-id') == '-2') return;
                if (editMode && pushUp.attr('data-id') == '-2') return;
                $('.novel-below').remove(pushUp);
                $('.novel-above').append(pushUp);
            }
            if (editMode) {
                var last = $('.novel-above .paragraph .col-10').last();
                var newEdit = last.html().trim();
                var parent = last.parent().parent();
                if (parent.hasClass('para-chapter')) {
                    newEdit = newEdit.substring(9);
                }
                else if (parent.hasClass('para-note')) {
                    newEdit = newEdit.substring(6);
                }
                else if (parent.hasClass('para-bookmark')) {
                    newEdit = newEdit.substring(10);
                }
                $('.writing-box').val(newEdit);
                $('.writing-box').focus();
            }
            if (false == trackDelayMousewheel) {
                trackDelayMousewheel = true;
                setTimeout(function () {
                    updateTracking();
                    trackDelayMousewheel = false;
                }, 5000);
            }
        });
        $('.edit-box').change(function () {
            //console.log($('.edit-box')[0].checked);
            editMode = $('.edit-box')[0].checked;
            if ($('.novel-above .paragraph').length == 1) {
                if ($('.novel-below .paragraph').length == 1) {
                    $('.edit-box')[0].checked = false;
                    editMode = $('.edit-box')[0].checked;
                    return;
                }
                var pushUp = $('.novel-below .paragraph').first();
                $('.novel-below').remove(pushUp);
                $('.novel-above').append(pushUp);
            }
            if (editMode) {
                var t = $('.novel-above .paragraph').last().find('.col-10');
                var newEdit = t.html().trim();
                var parent = t.parent().parent();
                if (parent.hasClass('para-chapter')) {
                    newEdit = newEdit.substring(9);
                }
                else if (parent.hasClass('para-note')) {
                    newEdit = newEdit.substring(6);
                }
                else if (parent.hasClass('para-bookmark')) {
                    newEdit = newEdit.substring(10);
                }
                $('.writing-box').val(newEdit);
            }
            else {
                $('.writing-box').val('');
            }
            $('.writing-box').focus();

            updateTracking();
        });
        $(document).on('click', '.act-notes', function () {
            $('.show-items').attr('value', 'act-notes');
            $('.act-chapters').removeClass('selected');
            $('.act-notes').addClass('selected');
            $('.chapter-items').hide();
            $('.notes-items').show();
            $('.new-chapter-box').attr('style', 'display:none;');
            $('.new-note-box').attr('style', 'display:none;');
        });
        $(document).on('click', '.act-chapters', function () {
            $('.show-items').attr('value', 'act-chapters');
            $('.act-chapters').addClass('selected');
            $('.act-notes').removeClass('selected');
            $('.chapter-items').show();
            $('.notes-items').hide();
            $('.new-chapter-box').attr('style', 'display:none;');
            $('.new-note-box').attr('style', 'display:none;');
        });

        $('.chapter-items').hide();
        $('.writing-box').focus();

        $(document).on('click', '.action[action="delete-paragraph"]', function () {
            var block = $(this).parent().parent().parent();
            var id = block.attr('data-id');
            var preId = block.attr('data-prev');
            var nexId = block.attr('data-next');
            var curContent = $('[data-id="' + id + '"] .col-10').html();
            var preContent = $('[data-id="' + preId + '"] .col-10').html();
            var nexContent = $('[data-id="' + nexId + '"] .col-10').html();
            var dataType = $('[data-id="' + id + '"]').attr('class');
            var url = "../../../Write/Act_RemoveParagraph";
            var formData = new FormData();
            formData.append('id', id);
            formData.append('prev', preId);
            formData.append('next', nexId);
            formData.append('curContent', curContent);
            formData.append('prevContent', preContent);
            formData.append('nextContent', nexContent);
            formData.append('dataType', dataType);
            $.ajax({
                type: 'POST',
                url: url,
                data: formData,
                processData: false,
                contentType: false
            }).done(function (response) {
                if (response.status === "success") {
                    $('[data-id="' + preId + '"]').attr('data-next', nexId);
                    $('[data-id="' + nexId + '"]').attr('data-prev', preId);
                    $('[data-id="' + id + '"]').remove();
                    updateTracking();
                }
            });
        });

        $(document).on('click', '.new-item', function () {
            if ($('.act-chapters').hasClass('selected')) {
                $('.new-chapter-box').attr('style', '');
            }
            else {
                $('.new-note-box').attr('style', '');
            }
        });

        $(document).on('click', '.chapter-note-item', function () {
            $.ajax({
                type: 'GET',
                url: '../../../Write/_GetChapterNotes?id=' + $(this).attr('data-id')
            }).done(function (response) {
                $('.items-view').html(response)
            });
        });

        $(document).on('click', '.notes-items-item', function () {
            $.ajax({
                type: 'GET',
                url: '../../../Write/_GetNoteNotes?id=' + $(this).attr('data-id')
            }).done(function (response) {
                $('.items-view').html(response)
            });
        });

        $(document).on('click', '.add-chapter-note', function () {
            $('.new-chapter-note').attr('style', '');
        });

        $(document).on('click', '.add-note-note', function () {
            $('.new-note-note').attr('style', '');
        });

        //$Spelling.SpellCheckAsYouType('.writing-box');

        updateTracking();

        $(document).on('click', '.lnr-trash', function () {
            var item = $(this);
            if (item.parent().hasClass('chapter-note')) {
                isChapter = true;
                isNote = false;
                actId = item.parent().attr('note-id');
                $('#dialog').attr('data-id', actId);
                $('.delete-note-title').html('Chapter Note:');
            }
            else {
                isChapter = false;
                isNote = true;
                actId = item.parent().attr('note-id');
                $('#dialog').attr('data-id', actId);
                $('.delete-note-title').html('Note Note:');
            }
            $('.delete-note-text').html(item.parent().html().replace('<span class="lnr lnr-trash"></span>', ''));
            $("#dialog").dialog("open");
            $('.ui-dialog').last().removeClass('invis');
        });

        $('.ui-dialog').addClass('invis');

        $('.notes-search').on('keypress', function (e) {
            $('.notes-items ul li').removeClass('invis');
            $('.notes-items ul li').each(function (q) {
                if ($($('.notes-items ul li')[q]).html().toLowerCase().indexOf($('.notes-search').val().toLowerCase()) < 0) {
                    $($('.notes-items ul li')[q]).addClass('invis');
                }
            });
        });

    });

    $("#dialog").dialog({
        autoOpen: false,
        width: 400,
        buttons: [
            {
                text: "Yes",
                click: function () {
                    if (isChapter) {
                        alert('fake delete chapter note: ' + $('#dialog').attr('data-id'));
                    }
                    else if (isNote) {
                        alert('fake delete note note: ' + $('#dialog').attr('data-id'));
                    }
                    $('button[title="Close"]').click()
                }
            },
            {
                text: "Cancel",
                click: function () {
                    $('button[title="Close"]').click()
                }
            }
        ]
    });
</script>